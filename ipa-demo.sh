#!/bin/bash

###############################################################################
#############
####		VARIABLE DEFINITION
#############
###############################################################################

# working directory
WORKINGDIR=`pwd`
DATADIR=$WORKINGDIR/data
# file for storing logs
LOGFILE=ipa-demo-`getDate`.log
# directory to store images
IMGDIR=/var/lib/libvirt/images

#server installation script
SERVERSH=freeipa-server-install.sh
LOCALSERVERSH=$DATADIR/$SERVERSH
#clinet installation script 
CLIENTSH=freeipa-client-install.sh
LOCALCLIENTSH=$DATADIR/$CLIENTSH

# filename of ssh keys that will be generated by script
SSHKEY_NAME=sshipademo
SSHKEY_FOLDER=$WORKINGDIR/cert
SSHKEY_FILENAME=""

# base image file
INSTALLIMAGE="ipa-ready-image.qcow2"
BASEIMAGE=""

# file containg VM names and ip addresses
HOSTFILE=hosts.txt

# ssh settings for override asking for confirmation when adding ssh key
# THIS OPTION IS VERY INSECURE AND SHOULDN'T BE USED FOR NONDEMONSTRATIVE PURPOSES
SSHOPT="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

# configuration data necessary for installation
USERNAME=ipademo
SERVERNAME=f15-ipa-server
SERVERHOSTNAME=master
PASSWORD=secret123
REALM=EXAMPLE.COM
DOMAIN=example.com
CLIENTNR=2
CLIENTBASENAME=f15-ipa-client

# number of cpu's used by virtual machine
VCPU=1
# availible ram ( 1 gb = 1048576 )
VRAM=1048576
# ARCHitecture
ARCH=x86_64
# fedora os version
OSVERSION=15
# disk size
DISKSIZE=10


###############################################################################
#############
####		FUNCTIONS DEFINITION
#############
###############################################################################

# function to get ip address of VM
# $1 - name of VM
function getVmIp ()
{
	macaddr=`virsh dumpxml $1 | grep "mac address" | awk -F\' '{print $2}'`
	
	ipaddr=`arp -an | grep $macaddr`

	while [ -z "$ipaddr" ]; do
		sleep 10
		ipaddr=`arp -an | grep $macaddr | awk '{print $2}'`
	done
	
	ipaddr=`echo ${ipaddr%?}`
	ipaddr=`echo $ipaddr | cut -c2-`
	
	echo $ipaddr
}

# function to check whether variable really contains number
# first parametr - variable to check
function isNumber {
	if [ -z `echo $1 | grep "^[0-9]*$"` ]
	then
		return 1;
	else
		return 0;
	fi
}

# function that prints help
# $1 - default name of base image
# $2 - default directory to store images
# $3 - default clients count
function printHelp {
	echo "Ipa-demo installation script"
	echo "This script should help you through setting up freeipa server and client in order to be able to try it out."
	echo " ATTENTION: You must have libvirt, qemu, qemu-kvm, qemu-img, qemu-system, python-virtinst, openssh-clients installed to run the script correctly."
	echo "usage: ipa-demo.sh [--IMGDIR dir][--sshkey keyfile][-clients CLIENTNR][--base BASEIMAGE][-h|--help]"
	echo "-h,--help - print help"
	echo "--IMGDIR - set directory to store images. By default \"$2\"."
	echo "--sshkey - specify sshkey for connecting to the VMs. (Must be the same that was used during creation of base image."
	echo "--base - specify the base image. By default script assumes existence of base image called \"$1\" in current directory."
	echo "--clients - number of client VMs to be created. By default $3."

}

# function to prepare xml file for virt-image to rerun
# $1 - vm name
# $2 - relative path to disk image
# $3 -virtual cpu's number
# $4 - memory
# $5 - architecture
function virtImageXml ()
{
	diskformat=`qemu-img info $2 | grep "file format" | awk '{print $3}'`
	output=$1.xml
	
	(
	printf "<image>\n"
	printf "\t<name>$1</name>\n"
	
	printf "\t<domain>\n"
	
	printf "\t  <boot type=\"hvm\">\n"
	
	printf "\t    <guest>\n"
	printf "\t\t<arch>$5</arch>\n"
	printf "\t    </guest>\n"
	
	printf "\t    <os>\n"
	printf "\t\t<loader dev=\"hd\"/>\n"
	printf "\t    </os>\n"
	
	printf "\t    <drive disk=\"$2\" target=\"hda\"/>\n"
	printf "\t  </boot>\n"
	
	printf "\t  <devices>\n"
	
	printf "\t\t <vcpu>$3</vcpu>\n"
    printf "\t\t <memory>$4</memory>\n"
    printf "\t\t <interface/>\n"
    printf "\t\t <graphics/>\n"
    
	printf "\t </devices>\n"
	
	printf "\t</domain>\n"
	
	# storage setting
	printf "\t<storage>\n"
	printf "\t\t<disk file=\"$2\" format=\"$diskformat\"/>\n"
	printf "\t</storage>\n"
	printf "</image>\n"
	) > $output
	
}

# function for cleaning up messy files
function cleanUp ()
{
	while [ ! -z $1 ]; do
		rm -f $1 &>> $LOGFILE
		shift
	done
	return 0	
}

# function for cleaning up VM's and their images
function cleanVMs ()
{
	if [ ! -z "`virsh list | grep $SERVERNAME`" ]
	then
		if [ ! -z "`virsh list --all | grep $SERVERNAME`" ]
		then
			virsh destroy $SERVERNAME &>> $LOGFILE
		fi
		virsh undefine $SERVERNAME &>> $LOGFILE
		rm -rf $IMGDIR/$SERVERNAME.qcow2 $SERVERNAME &>> $LOGFILE
	fi
	
	for i in `virsh list | grep $CLIENTBASENAME`; do
		tmp=`echo $i | awk '{print $2}'`
		if [ "running" == `echo $i | awk '{print $3}'` ]
		then
			virsh destroy $tmp &>> $LOGFILE
		fi
		virsh undefine $tmp &>> $LOGFILE
		rm -rf $IMGDIR/$tmp.qcow2 $SERVERNAME &>> $LOGFILE
	done
	return 0	
}

# function to check whether the user is root
function checkRoot ()
{
	if [ `id -u` -ne 0 ] ; then
                echo "Please run as 'root' to execute '$0'!"
                exit 1
        fi
}

# cuts off last backslach in directory address - just to make it compatible
# $1 - address to be checked
function lastCharInPath()
{
	if [ "${1: -1}" == "/" ]
	then
		echo ${1%?}
	else
		echo $1
	fi
}

# function for getting current date
function getDate ()
{
	date +%y%m%d%H%M
}

# function for detecting when the VM is running and ready to execute commands
# $1 - VM's ip address
# $2 - certificate location
function waitForStart ()
{
	flag=255
	while [ ! $flag -eq 0 ]; do
		sleep 10
		ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i $2 root@$1 'exit' &> /dev/null
		flag=$?
	done
}

# function for waiting untill the VM is shutdown correctly
# $1 - VM name
function waitForEnd ()
{
	while [ -z "`virsh list --inactive | grep $1`" ]; do
		sleep 10
	done
}

# function for checking whether the provided path is a web address
checkForWebAddress ()
{
	http=`echo $1 | grep "^http[s]\{0,1\}://[a-zA-Z0-9]\{1,\}"`
	ftp=`echo $1 | grep \"^ftp://[a-zA-Z0-9]\{1,\}\"`
	
	if [ -z "$http" -a -z "$ftp" ]
	then
		return 0
	else
		return 1
	fi
	return 0
}

# function for creating disk images based on base image
# $1 - base image location
# $2 - new image
# $3 - log file
function createDiskImage ()
{
	if [ -f "$2" ]
	then
		echo "Image file $2 already exists!" >&2
		exit 1
	fi
	qemu-img create -b $1 -f qcow2 "$2" &>> $3
	
	if [ ! $? -eq 0 ]
	then
		echo "Unable to create VM's disk image! Check log file: $3"
		exit 1
	fi
}

#################################################################################
####################
########		END OF FUNCTIONS DEFINITION
####################
#################################################################################

# make all commands visible
#set -x

# remove file with host's ips and names
if [ -f $HOSTFILE ]
then
	rm -f $HOSTFILE
fi

# Add header to log file for current task
echo "" &>> $LOGFILE
echo "NEW RECORD, date:`getDate`" &>> $LOGFILE
echo "" &>> $LOGFILE

#############################################
## WELCOME MESSAGE
#############################################
echo "Welcome to IPA-DEMO script for automatic setting up of VM's enviroment and installation of freeipa-server and -clients."


#############################################
########## DEALING WITH PARAMETERS
#############################################

# parse arguments
while [ ! -z $1 ]; do
	case $1 in
	--base) if [ -z $2 ]
			then
				echo "You must specify the base image file!"
				exit 1
			fi
			BASEIMAGE=$2
			shift
			;;

	--sshkey) 
				if [ -z $2 ]
				then
					echo "You must specify the ssh key!"
					exit 1
				fi
				SSHKEY_FILENAME=$2
				shift
				;;
	--imgdir) 
				if [ -z $2 ]
				then
					echo "You must specify the directory for saving images!"
					exit 1
				fi
				IMGDIR=$2
				shift
				;;
	
	--clients) 
				if [ -z $2 ]
				then
					echo "You must specify the number of clients!"
					exit 1
				fi
				CLIENTNR=$2
				shift
				;;

	-h) printHelp $INSTALLIMAGE $IMGDIR $CLIENTNR
		exit 0
		;;
		
	--help) printHelp $INSTALLIMAGE $IMGDIR $CLIENTNR
			exit 0
		;;
		
	*) echo "Unknown parameter $1"
	    exit 1
		;;
	esac
	shift
done

# check arguments
if [ ! -d $IMGDIR ]
then
	echo "Directory for storing images doesn't exist!" >&2
	exit 1
fi

# get full path to image dir
cd $IMGDIR
IMGDIR=`pwd`
cd $WORKINGDIR

isNumber $CLIENTNR
if [ $? -eq 1 ]
then
	echo "Number of clients is in bad format! Try to use numbers only." >&2
	exit 1
fi

if [ $CLIENTNR -lt 1 ]
then
	echo "Number of clients should be at least 1!" >&2
	exit 1
fi

if [ ! -d $DATADIR ]
then
	echo "Directory 'data' with necessary scripts is missing!" >&2
	exit 1
fi

if [ ! -f $LOCALCLIENTSH ] || [ ! -f $LOCALSERVERSH ]
then
	echo "Installation scripts missing!" >&2
	exit 1
fi

###############################################
########## END OF ARGUMENTS
###############################################

# check whether user is root
checkRoot

###############################################
######### FIND BASEIMAGE AND CERTIFICATE
###############################################

printf "Loading base image\n"
if [ -z "$BASEIMAGE" ]
then
	if [ -f $INSTALLIMAGE ]
	then
		printf "Moving base image to the same directory that should contain VM's images: $IMGDIR\n"
		mv $INSTALLIMAGE $IMGDIR/$INSTALLIMAGE
		BASEIMAGE=$IMGDIR/$INSTALLIMAGE
	elif [ -f "$IMGDIR/$INSTALLIMAGE" ]
	then
		BASEIMAGE=$IMGDIR/$INSTALLIMAGE
	else
		echo "Cannot find base image" >&2
		exit 1
	fi
else
	BASEIMAGE=`lastCharInPath $BASEIMAGE`
	checkForWebAddress $BASEIMAGE
	if [ $? -eq 1 ]
	then
		printf "\tDownloading base image:\n"
		wget $BASEIMAGE -O $IMGDIR/$INSTALLIMAGE
		if [ ! $? -eq 0 ]
		then
			echo "Can not get base image!" >&2
			exit 1
		fi
		BASEIMAGE=$IMGDIR/$INSTALLIMAGE
	else
		if [ ! -f $BASEIMAGE ]
		then
			echo "Can't find base image!" >&2
			exit 1
		else
			printf "\tMoving base image to the same directory that should contain VM's images: $IMGDIR\n"
			mv $BASEIMAGE $IMGDIR/$INSTALLIMAGE
			BASEIMAGE=$IMGDIR/$INSTALLIMAGE
		fi
	fi
fi

printf "Loading SSH key\n"
# find certificate
if [ -z "$SSHKEY_FILENAME" ]
then
	if [ ! -f "$SSHKEY_FOLDER/$SSHKEY_NAME" ]
	then
		echo "Cannot find SSH key!" >&2
		exit 1
	else
		SSHKEY_FILENAME="$SSHKEY_FOLDER/$SSHKEY_NAME"
	fi
else
	checkForWebAddress $SSHKEY_FILENAME
	if [ $? -eq 1 ]
	then
		printf "\t\tDownloading ssh key:"
		wget $SSHKEY_FILENAME -O $SSHKEY_NAME
		if [ ! $? -eq 0 ]
		then
			echo "Can not get SSH key!" >&2
			exit 1
		fi
		SSHKEY_FILENAME=$SSHKEY_NAME
	else
		if [ ! -f $SSHKEY_FILENAME ]
		then
			echo "Cannot find SSH key!" >&2
			exit 1
		fi
	fi
fi

###############################################
#########
####	Preparing VMs and install scripts
#########
###############################################

printf "Creating server virtual machine\n"
printf "\t[1/5] Creating disk image for server VM\n"
# create disk image for new VM
createDiskImage $BASEIMAGE "$IMGDIR/$SERVERNAME.qcow2" $LOGFILE
printf "\t[2/5] Creating definition file for server VM\n"
# prepare xml definition of VM that will be used to run system update
virtImageXml $SERVERNAME "$IMGDIR/$SERVERNAME.qcow2" $VCPU $VRAM $ARCH
printf "\t[3/5] Starting server VM\n"
# start VM defined by XML file
virt-image $SERVERNAME.xml &>> $LOGFILE

if [ ! $? -eq 0 ]
then
	echo "Unable to create VM! Check log file: $LOGFILE"
	cleanVMs
	cleanUp $SERVERNAME.xml $IMGDIR/$SERVERNAME.qcow2
	exit 1
fi

# remove xml file
cleanUp $SERVERNAME.xml

# get server ip
SERVERIP=`getVmIp $SERVERNAME`

waitForStart $SERVERIP $SSHKEY_FILENAME $LOGFILE

printf "\t[4/5] Installing freeipa-server on server VM. This could take few minutes\n"
# copy server install script to server
cat $LOCALSERVERSH | ssh $SSHOPT -i $SSHKEY_FILENAME root@"$SERVERIP" "cat ->>~/$SERVERSH" &>> $LOGFILE

if [ ! $? -eq 0 ]
then
	echo "Unable to connect to VM." >&2
	cleanVMs
	cleanUp $SERVERNAME.xml
	exit 1
fi

# install freeipa-server
ssh $SSHOPT root@$SERVERIP -i $SSHKEY_FILENAME "sudo sh ~/$SERVERSH -d $DOMAIN -c $SERVERHOSTNAME -r $REALM -p $PASSWORD -e $PASSWORD" &>> $LOGFILE

if [ ! $? -eq 0 ]
then
	echo "Installation of freeipa-server failed." >&2
	cleanVMs
	exit 1
fi

printf "\t[5/5] Adding '$USERNAME' user \n"
# add user ipademo to freeipa
ssh $SSHOPT root@$SERVERIP -i $SSHKEY_FILENAME "printf \"$USERNAME\n$USERNAME\" | sudo ipa user-add $USERNAME --first=ipa --last=demo --PASSWORD" &>> $LOGFILE

if [ ! $? -eq 0 ]
then
	echo "User $USERNAME can't be added. Installation will skip this step." >&2
fi


printf "Server installation done\n"

# CLIENTS INSTALLATION

CLIENTCNT=0

while [ $CLIENTCNT -lt $CLIENTNR ]; do
	echo "Installing client $(($CLIENTCNT+1)) of $CLIENTNR"
	CLIENTNAME="$CLIENTBASENAME-$CLIENTCNT"
	CLIENTHOSTNAME="client-$CLIENTCNT"
	
	printf "\t[1/5] Creating disk image for client VM\n"
	# create disk image for new VM
	createDiskImage $BASEIMAGE "$IMGDIR/$CLIENTNAME.qcow2" $LOGFILE
	printf "\t[2/5] Creating definition file for server VM\n"
	# prepare xml definition of VM that will be used to run system update
	virtImageXml $CLIENTNAME "$IMGDIR/$CLIENTNAME.qcow2" $VCPU $VRAM $ARCH
	printf "\t[3/5] Starting server VM\n"
	# start VM defined by XML file
	virt-image $CLIENTNAME.xml &>> $LOGFILE

	if [ ! $? -eq 0 ]
	then
		echo "Unable to create VM! Check log file: $LOGFILE"
		cleanUp $CLIENTNAME.xml
		cleanVMs
		exit 1
	fi

	cleanUp $CLIENTNAME.xml
	
	# get server ip
	CLIENTIP=`getVmIp $CLIENTNAME`

	waitForStart $CLIENTIP $SSHKEY_FILENAME $LOGFILE

	echo "VM name: $CLIENTNAME" >> $HOSTFILE
	echo "IP address: $CLIENTIP" >> $HOSTFILE
	echo "Username: $USERNAME" >> $HOSTFILE
	echo "User PASSWORD: $PASSWORD" >> $HOSTFILE
	echo "Connection via virt-viewer: virt-viewer $CLIENTNAME" >> $HOSTFILE
	echo "Connection via ssh: ssh $SSHOPT $USERNAME@$CLIENTIP" >> $HOSTFILE
	echo "" >> $HOSTFILE

	printf "\t[4/5] Adding machine to IPA DOMAIN\n"
	# add host to IPA
	ssh $SSHOPT -i $SSHKEY_FILENAME root@"$SERVERIP" "ipa host-add $CLIENTHOSTNAME.$DOMAIN --ip-address=$CLIENTIP --PASSWORD=$PASSWORD" &>> $LOGFILE
	
	if [ ! $? -eq 0 ]
	then
		echo "Unable to connect to the server VM." >&2
		cleanVMs
		exit 1
	fi

	printf "\t[5/5] Installing freeipa-client on client's VM\n"
	# copy client install script to client and execute it
	cat $LOCALCLIENTSH | ssh $SSHOPT -i $SSHKEY_FILENAME root@"$CLIENTIP" "cat ->>~/$CLIENTSH" &>> $LOGFILE
	
	if [ ! $? -eq 0 ]
	then
		echo "Unable to connect to the client VM." >&2
		cleanVMs
		exit 1
	fi
	
	ssh $SSHOPT -i $SSHKEY_FILENAME root@"$CLIENTIP" "sh ~/$CLIENTSH -d $DOMAIN -c $CLIENTHOSTNAME -s $SERVERHOSTNAME -p $PASSWORD -n $SERVERIP" &>> $LOGFILE
	
	# set PASSWORD for user 'ipademo'
	if [ $CLIENTCNT -eq 0 ]
	then
		printf "\t\tSetting PASSWORD for user 'ipademo'\n"
		# give the machine time to reboot
		sleep 10
		# wait until it's ready
		waitForStart $CLIENTIP $SSHKEY_FILENAME $LOGFILE
		# change the user PASSWORD
		ssh $SSHOPT -i $SSHKEY_FILENAME root@"$CLIENTIP" "printf \"$USERNAME\n$PASSWORD\n$PASSWORD\n\" | kinit $USERNAME" &>> $LOGFILE
		if [ ! $? -eq 0 ]
		then
			echo "Unable to set PASSWORD for user $USERNAME. You'll have to set it manually by connecting to any client via ssh under user name $USERNAME. Initial PASSWORD is $USERNAME." >&2
		fi
	fi
	
	echo "Client-$CLIENTCNT installation done."
	CLIENTCNT=$(($CLIENTCNT + 1))
# end while
done

echo ""
echo "DONE!"

echo "Following machines should be running now with freeipa installed:"
echo "Server:"
echo "VM name:$SERVERNAME"
echo "IP address: $SERVERIP"
echo "root PASSWORD: rootroot"
echo "Connection via virt-viewer: virt-viewer $SERVERNAME"
echo "Connection via ssh: ssh $SSHOPT -i $SSHKEY_FILENAME root@$SERVERIP"
echo ""
echo "Clients:"
echo "Root PASSWORD for all clients: rootroot"
echo "Ipademo user PASSWORD to be used in kinit: ipademo"
echo ""
cat $HOSTFILE
